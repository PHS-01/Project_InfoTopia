openapi: 3.0.0
info:
  title: API Laravel
  description: Documentação da API Laravel
  version: 1.0.0
servers:
  - url: http://localhost:8000/api
    description: API local
tags:
  - name: Auth
    description: Endpoints relacionados à autenticação de usuários
  - name: Users
    description: Endpoints de usuários
  - name: Roles
    description: Endpoints de cargos
  - name: Courses
    description: Endpoints de cursos
  - name: Classes
    description: Endpoints de turmas
  - name: Posts
    description: Endpoints de postagens
  - name: Comments
    description: Endpoints de comentários
paths:
  /register:
    post:
      tags:
        - Auth
      summary: Registra um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                matriculation:
                  type: string
                password:
                  type: string
              required:
                - email
                - matriculation
                - password
      responses:
        '201':
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /login:
    post:
      tags:
        - Auth
      summary: Realiza login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /logout:
    post:
      tags:
        - Auth
      summary: Faz logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout bem-sucedido
        '401':
          description: Não autorizado
  /password/solicitation:
    post:
      tags:
        - Auth
      summary: Solicitar troca de senha
      description: Envia um e-mail ao usuário com um link para troca de senha contendo o token gerado.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: O e-mail do usuário que deseja solicitar a troca de senha.
                  example: user@example.com
      responses:
        '200':
          description: E-mail enviado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: E-mail para troca de senha enviado com sucesso
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuário não encontrado
  /password/password-reset/{token}:
    post:
      tags:
        - Auth
      summary: Definir nova senha
      description: Permite que o usuário defina uma nova senha usando o token recebido por e-mail.
      parameters:
        - name: token
          in: path
          required: true
          description: O token recebido pelo e-mail para redefinir a senha.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_password
              properties:
                new_password:
                  type: string
                  description: A nova senha do usuário.
                  example: "newStrongPassword123"
      responses:
        '200':
          description: Senha alterada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Senha alterada com sucesso
        '404':
          description: Solicitação não encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Solicitação não encontrada
        '422':
          description: Solicitação expirada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Solicitação expirada
  /users/{id}:
    post:
      tags:
        - Users
      summary: Atualiza um usuário
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                matriculation:
                  type: string
                profile_photo:
                  type: string
                  format: binary
                password:
                  type: string
      responses:
        '200':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - Users
      summary: Deleta um usuário
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuário deletado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /users:
    get:
      tags:
        - Users
      summary: Lista usuários
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  
  /users/current:
    get:
      tags:
        - Users
      summary: Retorna o usuário logado da sessão atual
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Retorna o usuário logado da sessão atual
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /auth/check:
    get:
      tags:
        - Users
      summary: Verifica se o usuário está autenticado
      security:
        - bearerAuth: []
      description: Retorna o status de autenticação do usuário atual.
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                    description: Indica se o usuário está autenticado.
                    example: true
  /users/{id}/classes:
    get:
      tags:
        - Users
      summary: Lista as classes de um usuário
      security:
        - bearerAuth: []
      description: Retorna uma lista de classes associadas ao usuário com o ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Lista de classes do usuário
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Mensagem de erro
                    example: "Usuário não encontrado"
  /roles:
    get:
      summary: Lista todos os cargos
      security:
        - bearerAuth: []
      description: Retorna uma lista paginada de cargos
      tags:
        - Roles
      responses:
        '200':
          description: Lista de cargos retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        format: uri
                      last:
                        type: string
                        format: uri
                      prev:
                        type: string
                        format: uri
                      next:
                        type: string
                        format: uri
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      last_page:
                        type: integer
                      total:
                        type: integer
    post:
      summary: Cria um novo cargo
      security:
        - bearerAuth: []
      description: Cria um cargo com base no campo `name`
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 40
                  example: Admin
              required:
                - name
      responses:
        '201':
          description: Cargo criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '422':
          description: Erro de validação
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        items:
                          type: string
  /roles/{id}:
    get:
      summary: Exibe detalhes de um cargos
      security:
        - bearerAuth: []
      description: Retorna informações de um cargo específico
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          required: true
          description: ID do cargo
          schema:
            type: integer
      responses:
        '200':
          description: Detalhes do cargo retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Cargo não encontrado
    put:
      summary: Atualiza um cargo existente
      security:
        - bearerAuth: []
      description: Atualiza as informações de um cargo com base no campo `name`
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          required: true
          description: ID do cargo
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 40
                  example: Super Admin
              required:
                - name
      responses:
        '200':
          description: Cargo atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '422':
          description: Erro de validação
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        items:
                          type: string
        '404':
          description: Cargo não encontrado
    delete:
      summary: Remove um cargo
      security:
        - bearerAuth: []
      description: Exclui um cargo pelo ID
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          required: true
          description: ID do cargo
          schema:
            type: integer
      responses:
        '200':
          description: Cargo deletado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cargo deletado com sucesso
        '404':
          description: Cargo não encontrado
  /roles/{id}/assing:
    post:
      tags:
        - Roles
      summary: Atribuir um cargo a múltiplos usuários
      description: Atribui o cargo especificado pelo `id` a um conjunto de usuários. Todos os usuários devem ser válidos e existentes.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do cargo a ser atribuído.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - users
              properties:
                users:
                  type: array
                  items:
                    type: integer
                  description: IDs dos usuários aos quais o cargo será atribuído.
              example:
                users: [1, 2, 3]
      responses:
        200:
          description: Cargo atribuído com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Novo cargo adicionado aos usuários"
        422:
          description: Erro de validação nos dados fornecidos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
              example:
                errors:
                  users: ["O campo usuários é obrigatório."]
                  "users.*": ["Um ou mais IDs de usuários são inválidos."]

  /roles/{id}/remove:
    delete:
      tags:
        - Roles
      summary: Remover um cargo de múltiplos usuários
      description: Remove o cargo especificado pelo `id` de um conjunto de usuários. Todos os usuários devem ser válidos e existentes.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do cargo a ser removido.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - users
              properties:
                users:
                  type: array
                  items:
                    type: integer
                  description: IDs dos usuários dos quais o cargo será removido.
              example:
                users: [1, 2, 3]
      responses:
        200:
          description: Cargo removido com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cargo removido dos usuários"
        422:
          description: Erro de validação nos dados fornecidos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
              example:
                errors:
                  users: ["O campo usuários é obrigatório."]
                  "users.*": ["Um ou mais IDs de usuários são inválidos."]
  /roles-users:
    get:
      tags:
        - Roles
      summary: Listar usuários agrupados por cargo
      description: Retorna uma lista de usuários agrupados por seus cargos. Cada chave do objeto é o nome de um cargo e o valor associado é um usuário correspondente ao cargo.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de usuários agrupados por cargo.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/User'
              example:
                "Administrador":
                  id: 1
                  name: "Ciro Gomes"
                  email: "ciro.gomes@example.com"
                  profile_photo: "/images/users/profile/photo.jpg"
  /courses:
    get:
      summary: Lista todos os cursos
      security:
        - bearerAuth: []
      description: Retorna uma lista paginada de cursos
      tags:
        - Courses
      responses:
        '200':
          description: Lista de cursos retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        format: uri
                      last:
                        type: string
                        format: uri
                      prev:
                        type: string
                        format: uri
                      next:
                        type: string
                        format: uri
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      last_page:
                        type: integer
                      total:
                        type: integer
    post:
      summary: Cria um novo curso
      security:
        - bearerAuth: []
      description: Cria um curso com base no campo `name`
      tags:
        - Courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  example: Informática para internet
              required:
                - name
      responses:
        '201':
          description: Curso criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '422':
          description: Erro de validação
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        items:
                          type: string
  /courses/{id}:
    get:
      summary: Exibe detalhes de um curso
      security:
        - bearerAuth: []
      description: Retorna informações de um curso específico
      tags:
        - Courses
      parameters:
        - name: id
          in: path
          required: true
          description: ID do curso
          schema:
            type: integer
      responses:
        '200':
          description: Detalhes do curso retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          description: Curso não encontrado
    put:
      summary: Atualiza um curso existente
      security:
        - bearerAuth: []
      description: Atualiza as informações de um curso com base no campo `name`
      tags:
        - Courses
      parameters:
        - name: id
          in: path
          required: true
          description: ID do curso
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 40
                  example: Técnico em Vestuário
              required:
                - name
      responses:
        '200':
          description: Curso atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '422':
          description: Erro de validação
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        items:
                          type: string
        '404':
          description: Curso não encontrado
    delete:
      summary: Remove um curso
      security:
        - bearerAuth: []
      description: Exclui um curso pelo ID
      tags:
        - Courses
      parameters:
        - name: id
          in: path
          required: true
          description: ID do curso
          schema:
            type: integer
      responses:
        '200':
          description: Curso deletado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Curso deletado com sucesso
        '404':
          description: Curso não encontrado
  /classes:
    get:
      summary: Listar Turmas
      description: Retorna uma lista paginada de turmas.
      tags:
        - Classes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de turmas retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Class'
    post:
      summary: Criar uma Turma
      description: Cria uma nova turma.
      tags:
        - Classes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  description: Nome da turma.
                year:
                  type: string
                  maxLength: 4
                  description: Ano
                profile_photo:
                  type: string
                  format: binary
                  description: Foto de Perfil da turma (jpeg, png, jpg, gif, svg).
                cover_photo:
                  type: string
                  format: binary
                  description: Capa da turma (jpeg, png, jpg, gif, svg).
                course_id:
                  type: integer
                  description: ID do curso relacionado à turma.
              required:
                - name
                - profile_photo
                - cover_photo
                - course_id
      responses:
        '201':
          description: Turma criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '422':
          description: Erro de validação nos dados enviados.
  /classes/{id}:
    get:
      summary: Obter Detalhes de uma Turma
      description: Retorna os detalhes de uma turma específica.
      tags:
        - Classes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID da turma.
      responses:
        '200':
          description: Detalhes da turma retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '404':
          description: Turma não encontrada.
    post:
      summary: Atualizar uma Turma
      description: Atualiza os detalhes de uma turma específica.
      tags:
        - Classes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID da turma.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  description: Nome da turma (opcional).
                year:
                  type: string
                  maxLength: 4
                  description: Ano (opcional)
                profile_photo:
                  type: string
                  format: binary
                  description: Foto de Perfil da turma (jpeg, png, jpg, gif, svg, opcional).
                cover_photo:
                  type: string
                  format: binary
                  description: Capa da turma (jpeg, png, jpg, gif, svg, opcional).
                course_id:
                  type: integer
                  description: ID do curso relacionado à turma (opcional).
      responses:
        '200':
          description: Turma atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '422':
          description: Erro de validação nos dados enviados.
    delete:
      summary: Deletar uma Turma
      description: Remove uma turma específica.
      tags:
        - Classes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID da turma.
      responses:
        '200':
          description: Turma deletada com sucesso.
        '404':
          description: Turma não encontrada.
  /classes/{id}/assing:
    post:
      tags:
        - Classes
      summary: Adiciona líderes de turma
      description: Adiciona usuários como líderes de uma turma específica.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID da turma.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - users
              properties:
                users:
                  type: array
                  items:
                    type: integer
                    description: IDs dos usuários que serão adicionados como líderes.
      responses:
        '200':
          description: Líderes de turma criados com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Líderes de turma criados com sucesso.
        '401':
          description: Não autorizado.
        '422':
          description: Erros de validação.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string

  /classes/{id}/remove:
    delete:
      tags:
        - Classes
      summary: Remove líderes de turma
      description: Remove usuários como líderes de uma turma específica.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID da turma.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - users
              properties:
                users:
                  type: array
                  items:
                    type: integer
                    description: IDs dos usuários que serão removidos como líderes.
      responses:
        '200':
          description: Líderes de turma removidos com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Líderes de turma removidos com sucesso.
        '401':
          description: Não autorizado.
        '422':
          description: Erros de validação.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
  /posts:
    get:
      summary: Listar postagens
      description: Retorna uma lista paginada de todas as postagens.
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de postagens.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    post:
      summary: Criar uma nova postagem
      description: Cria uma nova postagem.
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Imagem da postagem (jpeg, png, jpg, gif ou svg).
                description:
                  type: string
                  description: Descrição da postagem.
                user_id:
                  type: integer
                  description: ID do Usuário.
                classe_id:
                  type: integer
                  description: ID da Turma.
      responses:
        201:
          description: Postagem criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        422:
          description: Erro de validação.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    description: Detalhes do erro.
  /posts/{id}:
    get:
      summary: Consultar uma postagem
      description: Retorna os detalhes de uma postagem específica.
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Dados da postagem.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    post:
      summary: Atualizar uma postagem
      description: Atualiza os dados de uma postagem existente.
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Imagem da postagem (jpeg, png, jpg, gif ou svg).
                description:
                  type: string
                  description: Descrição da postagem.
                user_id:
                  type: integer
                  description: ID do Usuário.
                classe_id:
                  type: integer
                  description: ID da Turma.
      responses:
        200:
          description: Postagem atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        422:
          description: Erro de validação.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    description: Detalhes do erro.
    delete:
      summary: Deletar uma postagem
      description: Exclui uma postagem específica.
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Postagem deletada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /comments:
    get:
      tags:
        - Comments
      summary: "Exibe uma lista de comentários"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de comentários
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
    post:
      tags:
        - Comments
      summary: "Cria um novo comentário"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - user_id
                - post_id
              properties:
                content:
                  type: string
                  description: "Conteúdo do comentário"
                user_id:
                  type: integer
                  description: "ID do usuário que criou o comentário"
                post_id:
                  type: integer
                  description: "ID do post no qual o comentário foi feito"
      responses:
        '201':
          description: "Comentário criado com sucesso"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '422':
          description: "Erro de validação"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
  /comments/{id}:
    get:
      tags:
        - Comments
      summary: "Exibe um comentário específico"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID do comentário"
          schema:
            type: integer
      responses:
        '200':
          description: "Comentário encontrado"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    put:
      tags:
        - Comments
      summary: "Atualiza um comentário"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID do comentário"
          schema:
            type: integer
      # requestBody:
      #   required: true
      #   content:
      #     application/json:
      #       schema:
      #         type: object
      #         properties:
      #           name:
      #             type: string
      #             maxLength: 40
      #             example: Super Admin
      #         required:
      #           - name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                user_id:
                  type: integer
                post_id:
                  type: integer
              required:
                - content
                - user_id
                - post_id
      responses:
        '200':
          description: "Comentário atualizado"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '422':
          description: "Erro de validação"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
    delete:
      tags:
        - Comments
      summary: "Deleta um comentário"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID do comentário"
          schema:
            type: integer
      responses:
        '200':
          description: "Comentário deletado com sucesso"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Comentário deletado com sucesso"
        '404':
          description: "Comentário não encontrado"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Comentário não encontrado"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        profile_photo:
          type: string
          format: uri
        matriculation:
          type: string
        classes:
          items:
            type: array
        roles:
          items:
            type: array
      required:
        - name
        - email
        - profile_photo
    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Admin
      required:
        - name
    Course:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Eletrotécnica
        classes:
          items:
            type: array
      required:
        - name
    Class:
      type: object
      properties:
        id:
          type: integer
          description: ID da turma.
        name:
          type: string
          description: Nome da turma.
        profile_photo:
          type: string
          description: URL da foto de perfil da turma.
        cover_photo:
          type: string
          description: URL da capa da turma.
        course_id:
          type: integer
          description: ID do curso relacionado à turma.
        year:
          type: string
          description: ID do curso relacionado à turma.
        course:
          type: object
          $ref: "#/components/schemas/Course"
        posts:
          items:
            type: array
      required:
        - name
        - profile_photo
        - cover_photo
        - course_id
    Post:
      type: object
      properties:
        id:
          type: integer
          description: ID da postagem.
        image:
          type: string
          format: binary
          description: Caminho da imagem da postagem.
        description:
          type: string
          description: Descrição da postagem.
        user_id:
          type: integer
          description: ID do Usuário associado à postagem.
        classe_id:
          type: integer
          description: ID da Turma associada à postagem.
        created_at:
          type: string
          format: date-time
          description: Data de criação.
        updated_at:
          type: string
          format: date-time
          description: Data de atualização.
    Comment:
      type: object
      properties:
        id:
          type: integer
          description: "ID do comentário"
        content:
          type: string
          description: "Conteúdo do comentário"
        user_id:
          type: integer
          description: "ID do usuário que criou o comentário"
        post_id:
          type: integer
          description: "ID do post no qual o comentário foi feito"
        user:
          $ref: '#/components/schemas/User'
        post:
          $ref: '#/components/schemas/Post'